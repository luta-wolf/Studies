# Числовые типы
# Первая категория типов данных: числовые типы и операции над ними
a = 5
b = 5.5
print(type(a))
print(dir(a))
print(type(b))
print(dir(b))
print('-' * 20)
print(40 + 3.14)# Преобразование целого в число с плавающей точкой
                 # математика и результат с плавающей точкой
# Вызывая встроенные функции, типы можно преобразовывать вручную:
print(int(3.1415)) # Сокращает число с плавающей точкой до целого
print(float(3))    # Преобразует целое число в число с плавающей точкой
a = 3 # Имя создается: не объявляется заранее
b = 4
print(a + 1, a - 1) # Сложение (3 + 1) , вычитание (3-1)
print(b * 3, b / 2) # Умножение (4 * 3), деление (4/2)
print(a % 2, b ** 2) # Деление по модулю (нахождение остатка),возведение в степень (4 ** 2)
print(2 + 4.0, 2.0 ** b) # Преобразования разнородных типов
print(b / 2 + a)    # То же, что и ((4/2) + 3)
print(b // 2 + a)
print(b / (2.0 + a))  # То же, что и (4 / (2.0 + 3))
print('-' * 20)
# Форматы числового отображения
num = 1 / 3.0
print(num) # Явный вывод
print('%e' % num) # Выражение форматирования строк
print('%4.2f' % num)
print('%4.4f' % num) # Альтернативный формат с плавающей точкой
print('{0:4.2f}'.format(num)) # Метод форматирования строк
# Форматы отображения str и герг
print(repr('spam')) # Используется интерактивным выводом: форма как в коде
print(str('spam'))  # Используется print: форма , дружественная к пользователю
print('-' * 20)
# Сравнения: нормальные и сцепленные
print(1 < 2)    # Меньше
print(2.0 >= 1) # Больше или равно: число разнородного типа 1 преобразуется в 1.0
print(2.0 == 2.0) # Равенство значений
print(2.0 != 2.0) # Неравенство значений
X = 2
Y = 4
Z = 6
print(X < Y < Z)  # Сцепленные сравнения: проверки вхождения в диапазон
print(X < Y and Y < Z)
# разрешено выстраивать цепочки произвольной длины:
print(X < Y > Z)
print(X < Y and  Y > Z)
print(1 < 2 < 3.0 < 4)
print(1 > 2 > 3.0 > 4)
#В сцепленных проверках можно использовать другие сравнения
print(1 == 2 < 3) # То же, что и 1 == 2 and 2 < 3
                  # Не то же, что и False < 3 (эквивалентно 0 < 3, которое истинно!)
print(1.1 + 2.2 == 3.3) # Разве это не должно быть True?
print(1.1 + 2.2)
print(int(1.1 + 2.2) == int(3.3))  # Нормально в случае преобразования
print('-' * 20)
#Деление: классическое, с округлением в меньшую сторону и настоящее
print(10 / 4)   # сохраняет остаток
print(10 / 4.0) # сохраняет остаток
print(10 // 4)  # усекает остаток
print(10 // 4.0) # округляет в меньшую сторону
print('-' * 20)
# Округление в меньшую сторону или усечение
import math
print(math.floor(2.5)) # Ближайшее меньшее значение
print(math.floor(-2.5))
print(math.trunc(2.5))  # Усечение дробной части (в сторону нуля)
print(math.trunc(-2.5))
print(5 / 2, 5 / -2)   # Усекает в меньшую сторону: округляет до первого меньшего целого
print(5 // 2, 5 // -2)  # 2.5 становится 2, -2.5 становится -3
print(5 / 2.0, 5 / -2.0)  # Повторяется для чисел с плавающей точкой,
print(5 // 2.0, 5 // -2.0)  # хотя результат имеет тот же тип
print('-' * 20)
#Точность целых чисел
print(999999999999999999999999999999 +1)
print(2 ** 200)
#Комплексные числа
print(1j * 1J)
print(2 + 1j * 3)
print((2 + 1j) * 3)
print(type(1j + 1J))
print('-' * 20)
#Шестнадцатеричная, восьмеричная и двоичная формы записи: литералы и преобразования
print(0o1, 0o20, 0o377) # Восьмеричные литералы: основание 8, цифры 0-7
print(0x01, 0x10, 0xFF) # Шестнадцатеричные литералы: основание 16, цифры 0-9/A-F
print(0b1, 0b10000, 0b11111111) # Двоичные литералы: основание 2, цифры 0~1 (З.Х, 2.6+)
print(0xff, 15*16**1 + 15*16**0)
print(0x2f, 2*16**1 + 15*16**0)
print(0xaa, 10*16**1 + 10*16**0)
print(0xf, 0b1111, 1*2**3 + 1*2**2 + 1*2**1 + 1*2**0)
print(oct(64)) # oct преобразует десятичное число в восьмеричное
print(hex(64)) # hex — в шестнадцатеричное
print(bin(64)) # bin — в двоичное
print(64, 0o100, 0x40, 0b1000000) # Цифры -> числа в сценариях и строки
print(int('64'), int('100', 8), int('40', 16), int('1000000', 2))
print(int('0x40', 16), int('0b1000000', 2)) # Литеральные формы также поддерживаются
# Функция eval(),  трактует строки, как если бы они были кодом Python
print(eval('64'), eval('0o100'), eval('0x40'), eval('0b1000000'))
print('%o, %x, %x, %X' % (64, 64, 255, 255)) # Числа => цифры
X = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF
print(X)
print(oct(X))
print(bin(X))