# Фундаментальные основы строк
# Основы строк
# Строковые литералы
'''
• одинарные кавычки — 'spa"m';
• двойные кавычки — "spa'm";
• утроенные кавычки ''...spam...'' """...spam...""
• управляющие последовательности — "s\tp\na\0m";
• неформатированные строки — r"С:\new\test.spm";
• байтовые литералы в Python З.Х и 2.6+ (см. главы 4 и 37) — b'sp\x01am';
• литералы Unicode в Python 2.Х и 3.3+ (см. главы 4 и 37) — u'eggs\и0020spam'.
'''
S1 = 'knight"s' # Одинарная кавычка
S2 = "knight's" # Двойная кавычка
print(S1, S2, 'knight\'s')
title = 'Meaning ' 'of' ' Life.'
print(title)
# Управляющие последовательности представляют специальные символы
s = 'a\nb\tc'
print(s)
print(len(s)) # Строка имеет длину пять символов: она содержит ASCII-символ 'а', символ новой
              #строки, ASCII-символ 'b' и т.д.

# \новая строка Игнорируется (строка продолжения)
# \\ Обратная косая черта (сохраняет один символ \)
# \' Одинарная кавычка (сохраняет ')
# \" Двойная кавычка (сохраняет ”)
# \a Звонок
# \b Забой
# \f Перевод страницы
# \n Новая строка (перевод строки)
# \r Возврат каретки
# \t Горизонтальная табуляция
# \v Вертикальная табуляция
# \xhh Символ с шестнадцатеричным значением hh
# (точно 2 цифры)
# \ооо Символ с восьмеричным значением ооо
# (до 3 цифр)
# # \0 Пустой: двоичный символ 0 (не конец строки)
# \N { идентификатор } Идентификатор базы данных Unicode
# \uhhhh Символ Unicode с 16-битным шестнадцатеричным значением
# \Uhhhhhhh Символ Unicode с 32-битным шестнадцатеричным значением
# \остальное Не управляющая последовательность
s = 'a\0b\0c'
print(s, len(s))
s = '\001\002\x03'
print(s, len(s))
s = 's\tp\na\x00m'
print(s)
x = 'C:\py\code'  # Сохраняет \ буквально (и отображает как \ \)
print(x, len(x))
# Неформатированные строки подавляют управляющие последовательности
myfile = open('C:\new\text.dat', 'w')
# myfile = open('C:/new/text.dat', 'w')
myfile = open('C:\\new\\text.dat', 'w')
myfile = open(r'C:\new\text.dat', 'w')
path = r'C:\new\text.dat'  # Отображает в формате, как в коде Python
print(path, len(path)) # Отображает в формате, дружественном к пользователю
# Утроенные кавычки представляют многострочные блочные строки
mantra = '''Always look
   on the bright
side of life.'''
print(mantra)
menu = '''spam # Комментарии здесь добавляются к строке!
eggs  # То же самое
'''
print(menu)
menu = (
    'spam\n' #Комментарии здесь игнорируются,
     'eggs\n'  #но символы новой строки не являются автоматическими
)
print(menu)
# помещайте комментарии до или после текста в утроенных кавычках либо используйте
# окружающими круглыми скобками
X = 1
'''
import os                # Временно отключить этот код
print(os.getcwd())   
'''
Y = 2
#Строки в действии
#Базовые операции
print(len('abx'))
print('abx' + 'cad')
print('NI!' * 8)
myjob = 'hacker'
for с in myjob: print (с, end=' ') # Проход по элементам с выводом каждого
print('k' in myjob) # Найден
print("z" in myjob) # He найден
print('spam' in 'abcspamdef') # Поиск подстроки без возвращения позиции
# Индексация и нарезание
S = 'spam'
print(S[0], S[-2]) # Индексация с начала или с конца
print(S[1:3], S[1:], S[:-1]) # Нарезание: извлечение сегмента
'''
Индексация (S[i]) извлекает компоненты по смещениям:
• первый элемент находится по смещению 0;
• отрицательные смещения означают отсчитывание с конца или справа;
• S [0] извлекает первый элемент;
• S [-2] извлекает второй элемент с конца (подобно S[len(S) -2]).

Нарезание (S[i:j]) извлекает непрерывные сегменты последовательности:
• верхняя граница является исключающей;
• если границы не указаны, тогда по умолчанию для них принимаются 0 и длина
последовательности;
• S [1:3] извлекает элементы, которые начинаются со смещения 1 и заканчивают­
ся по смещению 3, не включая его;
• S [1: ] извлекает элементы, начиная со смещения 1 и до конца (длина последо­
вательности);
• S [ :3] извлекает элементы, которые начинаются со смещения которые начина­
ются со смещения 0 и заканчиваются по смещению 3, не включая его;
• S [ :-1] извлекает элементы, начиная со смещения 0 и заканчивая последним
элементом, но не включая его;
• S [:] извлекает элементы, начиная со смещения 0 и до конца — создает копию
верхнего уровня S.
Расширенное нарезание (S [i: j :k] ) принимает шаг
(или страйд (большой шаг)) к, который по умолчанию равен +1;
• позволяет пропускать элементы и менять порядок на противоположный, как
объясняется в следующем разделе.'''
print('-' * 20)
# Расширенное нарезание: третий предел и объекты срезов
S = 'abcdefghijklmnop'
print(S[1:10:2]) # Пропуск элементов
print(S[::2])
s = 'hello'
print(s, s[::-1]) # Смена порядка, следования элементов на противоположный
s = 'abcdefg'    #
print(s[5:1:-1]) # Смысл границ изменяется
s  = 'spam'
print(s[::-1])
print('-' * 20)
# Инструменты преобразования строк
print(int("42"), str(42)) # Преобразование из строки и в строку
print(repr(42)) # Преобразование в строку в том виде, как она представлена в коде
S = "42"
I = 1
print(int(S) + I) # Принудительно применить сложение
print(S + str(I)) # Принудительно применить конкатенацию
print(str(3.1415), float("1.5"))
# Преобразования кодов символов
print(ord('s'))  # ord() преобразует одиночный символ в его внутренний целочисленный код
print(chr(115))  # chr() выполняет обратное преобразование, принимая целочисленный код
                # и возвращая надлежащий символ
B = '1101' # Преобразование двоичных цифр в целое число с помощью ord
I = 0
while B != '':
    I = I * 2 + (ord(B[0]) - ord('0'))
    B = B[1:]
print(I)
# Изменение строк, часть I
S = 'spam'
S = S + 'SPAM!' # Чтобы изменить строку, нужно создать новую
S = S[:4] + 'Burger' + S[-1]
print(S)
S = 'splot'
S = S.replace('pl', 'pamal')
print(S)
print('That is %d %s bird!' % (1, 'dead'))
print('That is {0} {1} bird!'.format(1, 'dead'))
print('-' * 20)
# Строковые методы
# Синтаксис вызова методов
'''
Извлечения атрибутов:
объект.атрибут -  “извлечь значение атрибута в объекте”.

Выражения вызовов:
функция(аргументы) означает “вызвать код функции, передав ему ноль или 
большее количество разделенных запятыми объектов
аргументов, и возвратить результирующее значение функции".

объект. метод (аргументы) - "Вызвать метод для обработки объекта с аргументами".'''

import math
print(math.sqrt(144))
s = 'spam'
print(s.find('pa')) # Вызов метода find для поиска 'ра ' в строке S
print('-' * 10)
# Примеры строковых методов: изменение строк, часть II
s = 'spammy'
s = s[:3] + 'xx' + s[-1] # Нарезать сегменты из S
print(s)
print(s.replace('mm', 'xx'))  # Заменить все mm на хх в S
s = 'aa$bb$cc$dd'
print(s.replace('$', 'SPAM'))
s = 'xxxxSPAMxxxxSPAMxxxx'
print(s)
where = s.find('SPAM') # Поиск позиции
print(where)           # Нашлась по смещению 4
s = s[:where] + 'EGGS' + s[(where+4):]
print(s)
print('-' * 20)
s = 'xxxxSPAMxxxxSPAMxxxx'
print(s)
print(s.replace('SPAM', 'EGGS'))   # Заменить все
print(s.replace('SPAM', 'EGGS', 1))  # Заменить одну
# Обратите внимание, что replace каждый раз возвращает новый строковый объект.
print(s)
s = 'spammy'
l = list(s)
print(l)
l[3] = 'x'  # Работает для списков, но не для строк
l[4] = 'x'
print(l)
s = ''.join(l)
print(s)
print(' SPAM '.join (['eggs', 'sausage', 'ham', 'toast']))
print('-' * 10)
# Примеры строковых методов: разбор текста
line = 'aaa bbb ccc'
col1 = line[:3]
col2 = line[8:]
print(col1, col2)
cols = line.split()
print(cols)
# строка разбивается  по запятым, которые представляют собой частый разделитель в данных,
# возвращаемых рядом инструментов для работы с базами данных:
line = 'bob,hacker,40'
print(line.split(','))
line = "i’mSPAMaSPAMlumberjack"
print(line.split('SPAM'))
print('-' * 10)
# Другие распространенные строковые методы в действии
line = "The knights who say Ni!\n"
print(line.rstrip())
print(line.upper())
print(line.isalpha())
print(line.endswith('Ni!\n'))
print(line.startswith('The'))
print(line)
print(line.find('Ni!') != -1) # Поиск через вызов метода или выражение
print('Ni!' in line)
sub = 'Ni!\n'
print(line.endswith(sub)) # Проверка наличия подстроки в конце через вызов метода или срез
print(line[-len(sub):] == sub)
print('-' * 20)
# Выражения форматирования строк.Может быть удобным, особенно когда
# форматируемый текст подлежит отображению для пользователей программы.
'''
1) Выражение форматирования строк: '... %s ...' % (значения)
2) Вызов метода форматирования строк: '...{}...'.format(значения)'''
# Основы выражений форматирования
'''
1) Выражение форматирования строк:
1. Слева от операции % укажите строку формата, содержащую одну или более встро­
енных целей преобразования, каждая из которых начинается с % (например, %d).
2. Справа от операции % укажите объект (или объекты, внедренные в кортеж), ко­
торый необходимо вставить в строку формата слева на месте цели (или целей)
преобразования.'''
print('That is %d %s bird!' % (1, 'dead')) # Выражение формата
print('That is %s %d %s bird!' % ('dd', 33, 'ff')) # Выражение формата
exclamation = 'Ni'
print('The knights who say %s' % (exclamation)) # Подстановка строки
print('%d %s %g you' % (1, 'spam', 4.0)) # Подстановки, специфичные для типов
print('%s %s %s' % (42, 3.14159, [1, 2, 3])) # Все типы соответствуют цели %s
# Расширенный синтаксис выражений форматирования
'''
s Строка (или строка str (X) любого объекта)
r То же, что и s, но применяется герг, а не str
с Символ (int или str)
d Десятичное число (целое число с основанием 10)
i Целое число
о Восьмеричное целое число (с основанием 8)
х Шестнадцатеричное целое число (с основанием 16)
X То же, что и х, но в верхнем регистре
е Число с плавающей точкой со степенью, в нижнем регистре
Е То же, что и е, но в верхнем регистре
f Десятичное число с плавающей точкой
F То же, что и f, но в верхнем регистре
g Число с плавающей точкой е или f
G Число с плавающей точкой Е или F
% Литерал % (записывается как %%)'''
# Более сложные примеры использования выражений форматирования
x = 1234
res = 'integers: ... %d ... %-6d ... %06d' % (x, x, x)
print(res)
x = 1.23456789
print(x)
print('%e | %E | %f | %g' % (x, x, x, x))
print('%f, %.2f, %.*f'% (1/3.0, 1/3.0, 4, 1/3.0))
#Выражения форматирования, основанные на словаре
print('%(qty)d more %(food)s' % {'qty':1, 'food':'spam'})
# Шаблон с целями подстановки
reply = '''                        
Greetings...
Hello %(name)s!
Your age is %(age)s'''
values = {'name':'Denis', 'age': 43} # Создание значений для подстановки
print(reply % values) # Выполнение подстановок
print('-' * 10)
# Вызовы методов форматирования строк
# Основы методов форматирования
template = '{0}, {1} and {2}' # По позициям
print(template.format('spam', 'ham', 'eggs'))
template = '{motto}, {pork} and {food}' # По ключевым словам
print(template.format(motto='spam', pork='ham', food='eggs'))
template = '{motto}, {0} and {food}' # По позициям и ключевым словам
print(template.format('ham', motto='spam', food='eggs'))
template = '{}, {} and {}' # По относительным позициям
print(template.format('spam', 'ham', 'eggs'))
# To же самое посредством выражения
template = '%s, %s and %s'
print(template % ('spam', 'ham', 'eggs'))
template = '%(motto)s, %(pork)s and %(food)s '
print(template % dict(motto='spam', pork='ham', food='eggs'))
print('{motto}, {0} and {food}'.format(42, motto=3.14, food=[1, 2]))
X = '{motto}, {0} and {food}'.format(42, motto=3.14, food=[1, 2])
print(X)
print(X.split(' and '))
Y = X.replace ('and', 'but under no circumstances')
print(Y)
# Добавление ключей, атрибутов и смещений
import sys
print('Му {1[kind]} runs {0.platform}'.format(sys, {'kind': 'laptop'}))
print('My {map[kind]} runs {sys.platform}'.format(sys=sys, map={'kind': 'laptop'}))
somelist = list('SPAM')
print(somelist)
print('first={0[0]} , third={0[2]}'.format (somelist))
print('first={0}, last={1}'.format(somelist[0], somelist[-1]))
parts = somelist[0], somelist[-1], somelist[1:3]
print('first={0}, last={1}, middle={2}'.format(*parts))
# Расширенный синтаксис методов форматирования
# Более сложные примеры использования методов форматирования
print('{0:10} = {1:10}'.format('spam', 123.4567))
print('{0:>10} = {1:<10}'.format('spam', 123.4567))
print('{0.platform:>10} = {1[kind]:<10}'.format(sys, dict(kind='laptop')))
print('{:10} = {: 10}'.format('spam', 123.4567))
print('{:>10} = {:<10}'.format('spam', 123.4567))
print('{.platform:>10} = {[kind]:<10}'.format(sys, dict(kind='laptop')))
print('{0:e}, {1:.3e}, {2:g}'.format(3.14159, 3.14159, 3.14159))
print('{0:f}, {1:.2f}, {2:06.2f}'.format(3.14159, 3.14159, 3.14159))
# Шестнадцатеричный, восьмеричный , двоичный
print('{0:X}, {1:o}, {2:b}'.format(255, 255, 255))
print('{0:.2f}'.format(1 / 3.0)) # Жестко закодированные параметры
print('%.2f' % (1 / 3.0)) # То же самое для выражения
print('{0:.{1}f}'.format(1 / 3.0, 4)) # Получение значений из аргументов
print('%.*f' % (4, 1 / 3.0)) # То же самое для выражения
# встроенная функция format()
print('{0: .2f}'.format(1.2345)) # Строковый метод
print(format(1.2345, '.2f')) # Встроенная функция
print('%.2f' % 1.2345) # Выражение
# Сравнение с выражением форматирования %
# Выражение форматирования: во всех версиях Python
print('%s=%s' % ('spam', 42))
# Метод форматирования: в Python 3.0+
print('{0}={1}'.format('spam', 42))
# С автоматической нумерацией: в Python 3.1+
print('{}={}'.format('spam', 42))
print('%s, %s and %s' % (3.14, 42, [1, 2])) # Произвольные типы
print('My %(kind)s runs %(platform)s' % {'kind': 'laptop', 'platform': sys.platform})
print('My %(kind)s runs %(platform)s' % dict(kind='laptop', platform=sys.platform))
somelist = list('SPAM')
parts = somelist[0], somelist[-1], somelist[1:3]
print('first=%s, last=%s, middle=%s' % parts)
# Заблаговременное создание данных двумя способами
data = dict(platform=sys.platform, kind='laptop')
print('My {kind:<8} runs {platform:>8}'.format(**data))
print('My %(kind)-8s runs %(platform) 8s' % data)
# интаксис разделителя тысяч для чисел
print('{0:d}'.format(999999999999))
print('{0:,d}'.format(999999999999))
print('{:,d}'.format(999999999999))
print('{:,d} {:,d}'.format(9999999, 8888888))
print('{:,.2f}'.format (296999.2567))
print('-' * 10)
# Для чего используется метод format?
# Общие категории типов
'''
- Числа (целые, с плавающей тачкой, десятичные, дроби, остальные)
Поддерживают сложение, умножение и т.д.
- Последовательности (строки, списки, кортежи)
Поддерживают индексацию, нарезание, конкатенацию и т.д.
- Отображения (словари)
Поддерживают индексацию по ключу и т.д.

- Неизменяемые типы (числа, строки, кортежи, фиксированные множества)
- Изменяемые типы (списки, словари, множества, байтовые массивы)'''
print(len('a\nb\x1f\000d'))
# Форматирование f-строка
a = 'Denis'
print(f'Hello {a}!')