# Списки и словари
# Списки
'''
Они являются упорядоченными коллекциями произвольных объектов
Они поддерживают доступ по смещению
Они имеют переменную длину, разнородны и допускают произвольно глубокое вложение
Они относятся к категории "изменяемая последовательность"
Они представляют собой массивы ссылок на объекты

L = [] Пустой список
L = [123, ’abc’, 1.23, {}] Четыре элемента: индексы 0..3
L = [’Bob’, 40.0, [’dev’, ’mgr']] Вложенные подсписки
L = list(’spam’) Список элементов итерируемого объекта
L = list(range(-4, 4)) список последовательных целых чисел
L[i] Индекс
L[i][j] индекс индекса
L[i:j] срез
len(L)  длина
LI + L2 Конкатенация
L * 3  повторение
for х in L: print (х) -Итерация
3 in L - членство
L. append(4)
L.extend([5,6,7])
L.insert(i, X) Методы: увеличение
L.index(X) Методы: поиск
L.count(X)
L.sort()
L.reverse()
L.copy()
L.clear() Методы: сортировка, обращение, копирование
(Python 3.3+), очистка (Python 3.3+)
L.pop(i)
L. remove (X)
del L[i]
del L[i:j]
L[i:j] = [] Методы, операторы: уменьшение
L[i] = 3
L[i:j] = [4,5,6] Присваивание по индексу, присваивание по срезу
'''
print(type([]))
print(dir(list))
print(dir([]))
L = list('spam')
print(L)
print('-' * 20)
# Списки в действии
# Базовые списковые операции
print(len([1, 2, 3])) # Длина
print([1, 2, 3] + [4, 5, 6]) # Конкатенация
print(['Ni!'] * 4)  # Повторение
print(str([1, 2]) + "34") # То же, что и "[1, 2]" + "34"
print([1, 2] + list("34")) # То же, что и [1, 2] + ["3", "4"]
# Итерация по спискам и списковые включения
print(3 in [1, 2, 3])  # Членство
for x in [1, 2, 3]:  # Итерация
    print(x, end=' ')
print([c * 4 for c in 'SPAM']) # Списковые включения
res = []
for с in 'SPAM': # Эквивалент спискового включения
    res.append(с * 4)
print(res)
print(list(map(abs, [-1, -2, 0, 1, 2]))) # Отображение функции по всей последовательности
# Индексация, нарезание и матрицы
L = [ 'spam', 'Spam', 'SPAM!']
print(L[2])# Смещения начинаются с нуля
print(L[-2]) # Отрицательные смещения отсчитываются справа
print(L[1:]) # Нарезание извлекает сегменты
# базовый двумерный массив 3x3
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix)
print(matrix[1])
print(matrix[1][1])
print(matrix[2][0])
# Изменение списков на месте
#Присваивания по индексам и срезам
L = ['spam', 'Spam', 'SPAM!']
L[1] = 'eggs' # Присваивание по индексу
print(L)
L[0:2] = ['eat', 'more'] # Присваивание по срезу: удаление + вставка
print(L) # Заменяет элементы 0, 1
L = [0, 1, 2, 3, 4, 5]
L[2:5] = L[3:6] # вставляемое значение извлекается до того, как слева происходит удаление
print(L)
print('=' * 20)
L = [1, 2, 3]
print(L)
L[1:2] = [4, 5] # Замена/вставка 4, 5 вместо 2
print(L)
L[1:1] = [6, 7] # Вставка (ничего не заменяет)
print(L)
L[1:2] = [] # Удаление (ничего не вставляет)
print(L)
print('=' * 20)
L = [1]
L[:0] = [2, 3, 4] # Вставить все на место :0, пустой срез в начале
print(L)
L[len(L):] = [5, 6, 7] # Вставить все на место len(L) :, пустой срез в конце
print(L)
L.extend([8, 9, 10]) # Вставить все в конце, именованный метод
print(L)
print('=' * 20)
# Вызовы списковых методов
L = ['eat', 'more', 'SPAM!']
L.append('please')
print(L)
L.sort() # Сортировка элементов списка (' S1 < 'е')
print(L)
print('=' * 20)
# Дополнительные сведения о сортировке списков
L = ['abc', 'ABD', 'aBe']
print(L)
L.sort() # Сортировка со смешанным регистром символов
print(L)
L = ['abc', 'ABD', 'aBe']
L.sort(key=str.lower) # Приведение к нижнему регистру
print(L)
L = ['abc', 'ABD', 'aBe']
L.sort(key=str.lower, reverse=True) # Изменение порядка сортировки
print(L)
L = ['abc', 'ABD', 'аВе']
print(sorted(L, key=str.lower, reverse=True)) # Встроенная функция сортировки
L = ['abc', 'ABD', 'аВе']
print(sorted([x.lower() for x in L], reverse=True)) # Предварительно трансформирует
                                                     # элементы: отличается!
# Другие распространенные списковые методы
L = [1, 2]
L.extend([3, 4, 5]) # Добавление множества элементов в конец (подобно + на месте)
print(L)
print(L.pop()) # # Удаление и возврат последнего элемента (по умолчанию: -1)
print(L)
L.reverse() # Метод обращения списка на месте
print(L)
print(list(reversed(L))) # Встроенная функция обращения списка с результатом (итератор)
L = []
L.append(1) # Затолкнуть в стек
L.append(2)
print(L)
L.pop() # Вытолкнуть из стека
print(L)
L = ['spam', 'eggs', 'ham']
print(L)
print(L.index('eggs')) # Индекс объекта (поиск)
L.insert(1, 'toast')  # Вставка в позицию
print(L)
L.remove('eggs') # Удаление по значению
print(L)
L.pop(1) # Удаление по позиции
print(L)
print(L.count('spam')) # Количество вхождений
# Другие распространенные списковые операции
L = ['spam', 'eggs', 'ham', 'toast']
print(L)
del L[0] # Удаление одного элемента
print(L)
del L[1:] # Удаление целой секции, no же, что и L[1: ] = []
print(L)
'''можно также удалять секцию списка, присваивая срезу пустой
список (L [i:j] = [])'''
L = ['Already', 'got', 'one']
L[1:] = []
print(L)
L[0] = []
print(L)

# Словари
'''
Они поддерживают доступ по ключу, а не по смещению
Они являются неупорядоченными коллекциями произвольных объектов
'''