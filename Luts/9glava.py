# Кортежи, файлы и все остальное
# Кортежи
'''
- Они являются упорядоченными коллекциями произвольных объектов
- Они поддерживают доступ по смещению
- Они относятся к категории “неизменяемая последовательность"
- Они имеют фиксированную длину, разнородны и допускают произвольно глубокое вложение
- Они представляют собой массивы ссылок на объекты

() - Пустой кортеж
т = (О,) - Одноэлементный кортеж (не выражение)
Т = (0, 'Ni', 1.2, 3) -Четырехэлементный кортеж
Т = О, 'Ni', 1.2, 3 - Еще один четырехэлементный кортеж
                    (такой же, как в предыдущей строке)
Т = ('Bob', ('dev', 'mgr')) - Вложенные кортежи
Т = tuple('spam') - Кортеж из элементов итерируемого объекта
T[i]     - Индекс, индекс индекса, срез, длина
T[i][j]
T[i:j]
len(T)
T1 + T2 - Конкатенация, повторение
T * 3
for x in T: print(x) - Итерация,членство
'spam' in T
[x ** 2 for x in T]
T.index('Ni') - поиск
T.count('Ni') - подсчет
'''
tuple = (1, 1, [1])
tuple[2].append('spam')
tuple[2].append(42)
print(tuple)
# Кортежи в действии
print((1, 2) + (3, 4)) # Конкатенация
print((1, 2) * 4) # Повторение
T = (1, 2, 3, 4)
print(T[0], T[1:3]) # Индексация, нарезание
x = (40) # Целое число!
print(x)
y = (40,) # Кортеж, содержащий целое число
print(y)
a = 'spam'
print(a,''.join(sorted(a)))
# Преобразования, методы и неизменяемость
t = (11, 8, 3, 5)
print(t, sorted(t))
tmp = list(t)
tmp.sort()
print(tmp)
print('-' * 10)
T = ('cc', 'aa', 'dd', 'bb')
tmp = list(T) # Создание списка из элементов кортежа
tmp.sort() # Сортировка списка
# T = tuple(tmp) # Создание кортежа из элементов списка
print(T, tmp)
print(sorted(T)) # Либо использование встроенной функции sorted, и экономия двух шагов
t = (1, 2, 3, 4, 5)
L = [х + 20 for х in t]
print(t,'\n', L)
t = (1, 2, 3, 2, 4, 2)
print(t.index(2)) # Смещение первого появления элемента 2
print(t.index(2,2)) # Смещение появления элемента 2 после смещения 2
print(t.count(2)) # Сколько всего элементов 2?
t = (1, [2, 3] , 4)
t[1][0] = 'spam' # Работает: изменяемые объекты внутри кортежа можно модифицировать
print(t)
# Для чего используются списки и кортежи?
'''неизменяемость кортежей обеспечивает определенную степень целостности'''
# Снова о записях: именованные кортежи
bob = ('Bob', 40.5, ['dev', 'mgr'])  # Запись в виде кортежа
print(bob)
print(bob[0], bob[2]) # Доступ по позиции
bob = dict(name='Bob', age=40.5, jobs=['dev','mgr']) # Запись в виде словаря
print(bob)
print(bob['name'], bob['jobs'])  # Доступ по ключу
#tuple(bob.values()) # Преобразование значений в кортеж
print(list(bob.items())) # Преобразование элементов в список кортежей

from collections import namedtuple # Импортирование типа расширения
Rec = namedtuple('Rec', ['name', 'age', 'jobs']) # Создание производного класса
bob = Rec('Bob', age=40.5, jobs=['dev', 'mgr'])  # Запись в виде именованного кортежа
print(bob)
print(bob[0], bob[2]) # Доступ по позиции
print(bob.name, bob.jobs) # Доступ по атрибуту
o = bob._asdict() #Форма, похожая на словарь
print(o)
print(o['name'], o['jobs']) # Доступ также и по ключу
bob = Rec('Bob', 40.5, ['dev', 'mgr']) # Для кортежей и именованных кортежей
name, age, jobs = bob # Присваивание кортежей
print(bob)
print(name, jobs)
for x in bob: print(x) # Итерационный контекст

# Файлы - именованные ячейки хранилища на компьютере, управляемые операционной системой
